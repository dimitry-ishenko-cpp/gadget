////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018 Dimitry Ishenko
// Contact: dimitry (dot) ishenko (at) (gee) mail (dot) com
//
// Distributed under the GNU GPL license. See the LICENSE.md file for details.

////////////////////////////////////////////////////////////////////////////////
#ifndef GADGET_CALL_CHAIN_HPP
#define GADGET_CALL_CHAIN_HPP

////////////////////////////////////////////////////////////////////////////////
#include <utility>
#include <vector>

////////////////////////////////////////////////////////////////////////////////
namespace gadget
{

////////////////////////////////////////////////////////////////////////////////
template<typename Fn>
struct call_chain
{
    ////////////////////
    void add(Fn fn) { chain_.push_back(std::move(fn)); }

    template<typename... Args>
    void call(Args&&... args)
    { for(auto const& fn : chain_) fn(std::forward<Args>(args)...); }

private:
    ////////////////////
    std::vector<Fn> chain_;
};

////////////////////////////////////////////////////////////////////////////////
}

////////////////////////////////////////////////////////////////////////////////
#endif

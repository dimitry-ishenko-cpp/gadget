////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018 Dimitry Ishenko
// Contact: dimitry (dot) ishenko (at) (gee) mail (dot) com
//
// Distributed under the GNU GPL license. See the LICENSE.md file for details.

////////////////////////////////////////////////////////////////////////////////
#include <gadget++/rgb_led.hpp>

////////////////////////////////////////////////////////////////////////////////
namespace gadget
{

////////////////////////////////////////////////////////////////////////////////
rgb_led::rgb_led(asio::io_service& io, gpio::pin* red, gpio::pin* green, gpio::pin* blue) :
    red_(io, red), green_(io, green), blue_(io, blue)
{ }

////////////////////////////////////////////////////////////////////////////////
bool rgb_led::is_dimmable(gadget::color color) const noexcept
{
    return get_led(color).is_dimmable();
}

////////////////////////////////////////////////////////////////////////////////
void rgb_led::turn(gadget::state state)
{
    red_.turn(state); green_.turn(state); blue_.turn(state);
}

////////////////////////////////////////////////////////////////////////////////
void rgb_led::turn(gadget::color color, gadget::state state)
{
    get_led(color).turn(state);
}

////////////////////////////////////////////////////////////////////////////////
void rgb_led::turn(gadget::state red, gadget::state green, gadget::state blue)
{
    red_.turn(red); green_.turn(green); blue_.turn(blue);
}

////////////////////////////////////////////////////////////////////////////////
gpio::state rgb_led::state(gadget::color color)
{
    return get_led(color).state();
}

////////////////////////////////////////////////////////////////////////////////
void rgb_led::dim(percent pc)
{
    red_.dim(pc); green_.dim(pc); blue_.dim(pc);
}

////////////////////////////////////////////////////////////////////////////////
void rgb_led::dim(gadget::color color, percent pc)
{
    get_led(color).dim(pc);
}

////////////////////////////////////////////////////////////////////////////////
void rgb_led::dim(gpio::percent red, gpio::percent green, gpio::percent blue)
{
    red_.dim(red); green_.dim(green); blue_.dim(blue);
}

////////////////////////////////////////////////////////////////////////////////
percent rgb_led::level(gadget::color color) const noexcept
{
    return get_led(color).level();
}

////////////////////////////////////////////////////////////////////////////////
led& rgb_led::get_led(gadget::color color) noexcept
{
    switch(color)
    {
    case red: return red_;
    case green: return green_;
    case blue: return blue_;
    }
}

////////////////////////////////////////////////////////////////////////////////
const led& rgb_led::get_led(gadget::color color) const noexcept
{
    return const_cast<rgb_led*>(this)->get_led(color);
}

////////////////////////////////////////////////////////////////////////////////
}

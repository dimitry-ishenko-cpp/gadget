////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018 Dimitry Ishenko
// Contact: dimitry (dot) ishenko (at) (gee) mail (dot) com
//
// Distributed under the GNU GPL license. See the LICENSE.md file for details.

////////////////////////////////////////////////////////////////////////////////
#include <gadget++/led.hpp>

#include <stdexcept>
#include <string>

////////////////////////////////////////////////////////////////////////////////
namespace gadget
{

////////////////////////////////////////////////////////////////////////////////
led::led(pin* pin, flag flags) :
    led(pin, adopt_pin)
{
    if(pin_)
    {
        pin_->mode(out, flags);
        pin_->period(10ms);
    }
}

////////////////////////////////////////////////////////////////////////////////
led::led(pin* pin, adopt_pin_t) : pin_(pin) { }

////////////////////////////////////////////////////////////////////////////////
led::led(led&& rhs) noexcept : pin_(rhs.pin_) { rhs.pin_ = nullptr; }

////////////////////////////////////////////////////////////////////////////////
led& led::operator=(led&& rhs) noexcept
{
    pin_ = rhs.pin_;
    rhs.pin_ = nullptr;
    return *this;
}

////////////////////////////////////////////////////////////////////////////////
namespace
{

void throw_empty(gpio::pin* pin, const std::string& what)
{
    if(!pin) throw std::logic_error(
        "led: Cannot " + what + " - empty instance"
    );
}

}

////////////////////////////////////////////////////////////////////////////////
void led::turn(gadget::state state)
{
    throw_empty(pin_, state == gadget::on ? "turn on" : "turn off");
    pin_->set(state);
}

////////////////////////////////////////////////////////////////////////////////
gadget::state led::state()
{
    throw_empty(pin_, "get state");
    return pin_->state();
}

////////////////////////////////////////////////////////////////////////////////
void led::dim(percent pc)
{
    throw_empty(pin_, "dim");
    pin_->duty_cycle(pc);
}

////////////////////////////////////////////////////////////////////////////////
percent led::level() const
{
    throw_empty(pin_, "get level");
    return pin_->duty_cycle();
}

////////////////////////////////////////////////////////////////////////////////
}
